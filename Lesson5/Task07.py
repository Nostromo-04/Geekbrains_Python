# 7. Создать вручную и заполнить несколькими строками текстовый файл,
#    в котором каждая строка должна содержать данные о фирме: название, форма собственности, выручка, издержки.
#    Пример строки файла: firm_1 ООО 10000 5000.
#    Необходимо построчно прочитать файл, вычислить прибыль каждой компании, а также среднюю прибыль.
#    Если фирма получила убытки, в расчет средней прибыли ее не включать.
#    Далее реализовать список. Он должен содержать словарь с фирмами и их прибылями,
#    а также словарь со средней прибылью. Если фирма получила убытки,
#    также добавить ее в словарь (со значением убытков).
#    Пример списка: [{“firm_1”: 5000, “firm_2”: 3000, “firm_3”: 1000}, {“average_profit”: 2000}].
#    Итоговый список сохранить в виде json-объекта в соответствующий файл.
#    Пример json-объекта:
#    [{"firm_1": 5000, "firm_2": 3000, "firm_3": 1000}, {"average_profit": 2000}]
#
#    Что нужно сделать:
#    1. Вычислить прибыль каждой компании: прибыль = выручка - издержки;
#    2. Вычислить среднюю прибыль всех компаний, с убытком компанию не включать! ср.прибыль = прибыль / кол-во компаний;
#    3. Реализовать словарь: {"имя_компании": прибыль}, включать в словарь ВСЕ компании;
#    4. Реализовать словарь: {“average_profit”: ср.прибыль};
#    5. Записать два словаря в список, который передать JSON файл;

import json

with open('task07.txt') as my_files:  # менеджер контекста - открываем на чтение
    comp_profit_dict = {}  # словарь, для компаний и прибыли
    aver_profit_dict = {}  # словарь, для средней прибыли
    all_comp_dict = {}  # словарь, для списка все компаний
    all_comp_list = []  # список всех фирм

    comp_profit_total = 0  # переменная, для подсчета: прибыли по всем компаниям (пункт №1)
    comp_aver_total = 0  # переменная, для подсчета: ср.прибыли всех компаний с положительной прибылью (пункт №2)
    aver_profit_total = 0  # переменная, для подсчета средней прибыли (пункт №2)
    margin = 0  # переменная, для подсчета: прибыль =  выручка - издержки

    for row in my_files:  # цикл, перебираем строки файла
        spl_row = row.split()  # разбиваем строки на слова
        comp_profit_total += int(spl_row[2]) - int(spl_row[3])  # считаем прибыль по всем компаниям (пункт №1)
        # print(f"Прибыль {spl_row[0]} составила {(int(spl_row[2]) - int(spl_row[3]))}")  # вывод проверка работы кода

        margin = int(spl_row[2]) - int(spl_row[3])  # считаем прибыль одной компании
        all_comp_dict = {spl_row[0]: str(margin)}  # записываем в словарь {компания:прибыль} (пункт №3)
        all_comp_list.append(all_comp_dict)  # добавляем каждую компанию в список (пункт №5)

        if int(spl_row[2]) > int(spl_row[3]):  # если выручка больше издержек,то
            comp_profit_dict.update({spl_row[0]: margin})  # добавляем в словарь
            comp_aver_total += int(spl_row[2]) - int(spl_row[3])  # считаем ср.прибыль по компаниям (пункт №2)
        else:
            comp_error = f"Компания {spl_row[0]} в убытке!!!"  # фиксируем убыточную компанию
            continue

    aver_profit_total = int(comp_aver_total / len(comp_profit_dict))  # считаем среднюю прибыль (пункт №2)
    aver_profit_dict = {"average_profit": aver_profit_total}  # вторая часть для json-файла (пункт №4)
    all_comp_list.append(aver_profit_dict)  # первая часть для json-файла (пункт №5)

# Этот блок проверка работы кода
# print()
# print(f"Средняя прибыль составила: {comp_aver_total} / {len(comp_profit_dict)} = {aver_profit_total}")
# print()
# print(f"Компании получившие прибыль': {comp_profit_dict}")
# print()
# print(comp_error)
# print()
# print(f"Пункт №5: {all_comp_list}")

with open('Task07.json', 'w') as my_files:  # менеджер контекста - открываем на запись
    json.dump(all_comp_list, my_files)
