# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
#    Сформировать итоговый массив чисел, соответствующих требованию.
#    Элементы вывести в порядке их следования в исходном списке.
#    Для выполнения задания обязательно использовать генератор.
#
#    Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
#    Результат: [23, 1, 3, 10, 4, 11]

# 1.ВАРИАНТ
import random  # импорт модуля random

random_list = [random.randint(1, 99) for _ in range(20)]  # заполняем список 20 значениями, в диапазоне от 1 до 99
print("*************** 1.Вариант ***************")
print(f"Исходный список:       {random_list}")  # Выводим список


def list_func(r_list):  # функция перебора списка
    result_list = []  # список для не повторяющихся значений
    double_list = []  # список для дубликатов
    for el in r_list:  # цикл, перебираем список
        if r_list.count(el) < 2:  # если общее количество значения меньше двух, то
            result_list.append(el)  # добавляяем в список не повторяющихся
        else:  # иначе
            double_list.append(el)  # добавляем в список дубликатов
    return result_list, double_list  # возвращаем из функции два списка


r1_list, r2_list = list_func(random_list)  # вызов функции и возврат значений
print(f"Результирующий список: {r1_list}")  # Вывод списка
print(f"Список дубликатов:     {r2_list}")  # Вывод списка

# *****************************************************************************************************************

# 2.ВАРИАНТ

print("*************** 2.Вариант ***************")
print(f"Исходный список:       {random_list}")  # Выводим список


def list_func(r_list):  # функция перебора списка
    r_list = [i for i in r_list if r_list.count(i) < 2]  # генератор списка
    return r_list  # возврат значения


print(f"Результирующий список: {list_func(random_list)}")  # Вызов функции и вывод списка
